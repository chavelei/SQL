--Wrote SQL queries in SQLiteStudio to analyze multi-table sales and customer data for trends and performance insights.

--Number of unique orders placed in January
SELECT COUNT(DISTINCT orderID) AS unique_jan_orders
FROM BIT_DB.JanSales
WHERE length(orderID) = 6
AND orderid != 'Order ID';

--Number of unique iPhone orders placed in January
SELECT COUNT(DISTINCT orderID) AS unique_iphone_orders
FROM BIT_DB.JanSales
WHERE length(orderID) = 6
AND orderID != 'Order ID'
AND product = 'iPhone';

-Customer account numbers for all the orders that were placed in February
SELECT c.acctnum
FROM BIT_DB.customers c
INNER JOIN BIT_DB.FebSales f
ON c.order_id = f.orderID
WHERE length(orderID) = 6
AND orderID != 'Order ID';

--Cheapest product sold in January and the price
SELECT DISTINCT Product, price
FROM BIT_DB.JanSales
ORDER BY price ASC
LIMIT 1;

--Total revenue for each product sold in January
SELECT Product, SUM(quantity)*price AS total_revenue
FROM Bit_DB.JanSales
GROUP BY product;

--Products that were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what the total revenue was
SELECT product, location, SUM(Quantity) AS quantity, SUM(Quantity)*price AS revenue
FROM BIT_DB.FebSales
WHERE location = '548 Lincoln St, Seattle, WA 98101';

--Number of customers that ordered more than 2 products at a time in February, and what the average amount spent for those customers was
SELECT COUNT(DISTINCT c.acctnum)AS num_of_customers, AVG(f.quantity * f.price) AS avg_spent
FROM BIT_DB.customers c
LEFT JOIN BIT_DB.FebSales f
ON c.order_id=f.orderID
WHERE f.Quantity > 2
AND length(order_id)= 6
AND order_id != 'Order ID';

--All the products sold in Los Angeles in February, and how many of each were sold
SELECT Product, SUM(quantity)
FROM BIT_DB.FebSales
WHERE location LIKE '%Los Angeles%'
GROUP BY product;

--Locations in New York that received at least 3 orders in January, and how many orders they each received
SELECT DISTINCT location, COUNT(orderID) total_quantity
FROM BIT_DB.JanSales
WHERE location LIKE '%NY%'
AND length(orderid) = 6
AND orderid != 'Order ID'
GROUP BY location
HAVING total_quantity >= 3;

--Total amount of each type of headphone sold in February
SELECT product, SUM(quantity) AS quantity
FROM bit_db.FebSales
WHERE product LIKE '%headphone%'
GROUP BY product;

--Average amount spent per account in February
SELECT SUM(quantity * price) / COUNT(c.acctnum) AS avg_spent_per_account
FROM BIT_DB.FebSales f
JOIN BIT_DB.customers c 
ON f.orderid = c.order_id
WHERE length(f.orderid) = 6 
AND f.orderid != 'Order ID';

--Average quantity per account in February
SELECT SUM(quantity) / COUNT(c.acctnum) AS avg_quantity_per_account
FROM BIT_DB.FebSales f
JOIN BIT_DB.customers c 
ON f.orderid = c.order_id
WHERE length(f.orderid) = 6 
AND f.orderid != 'Order ID';

--Product that brought in the most revenue and how much revenue it brought
SELECT product, SUM(quantity*price) AS revenue
FROM BIT_DB.JanSales
GROUP BY product
ORDER BY revenue DESC
LIMIT 1;
